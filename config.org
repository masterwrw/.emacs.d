e#+STARTUP: overview
* Garbage collection
#+BEGIN_SRC emacs-lisp
  ;;; This fixed garbage collection, makes emacs start up faster ;;;;;;;
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)

  (defvar startup/file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (defun startup/revert-file-name-handler-alist ()
    (setq file-name-handler-alist startup/file-name-handler-alist))

  (defun startup/reset-gc ()
    (setq gc-cons-threshold 16777216
          gc-cons-percentage 0.1))

  (add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
  (add-hook 'emacs-startup-hook 'startup/reset-gc)
#+END_SRC

* Installing use-package
#+BEGIN_SRC emacs-lisp
;; package-archives
(require 'package)
(setq package-enable-at-startup nil) ;; not activat installed packages

(defvar site-gnu '("gnu" . "http://elpa.emacs-china.org/gnu/"))
(defvar site-melpa '("melpa" . "http://elpa.emacs-china.org/melpa/"))
(defvar site-melpa-stable '("melpa-stable" . "http://elpa.emacs-china.org/melpa-stable/"))
(defvar site-marmalade '("marmalade" . "http://marmalade-repo.org/packages/"))
(defvar site-org '("org" . "https://orgmode.org/elpa/"))

(setq package-archives nil)
(add-to-list 'package-archives site-melpa-stable t)
(add-to-list 'package-archives site-melpa t)
(add-to-list 'package-archives site-gnu t)
;;(add-to-list 'package-archives site-marmalade t)
;;(package-initialize) ;; activate installed packages

(unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable"))
  (package-refresh-contents))

;; On-demand installation of packages
(defun require-package (package &optional min-version no-refresh)
  "Ask elpa to install given PACKAGE."
  (if (package-installed-p package min-version)
      t
    (if (or (assoc package package-archive-contents) no-refresh)
        (package-install package)
      (progn
        (package-refresh-contents)
        (require-package package min-version t)))))

;;; Bootstrapping use-package
(unless (package-installed-p 'use-package)
  (require-package 'use-package))

(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))
#+END_SRC

* Start up profiler
** benchmark-init
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :ensure t
    :config
    (benchmark-init/activate)
    :hook
    (after-init . benchmark-init/deactivate))
#+END_SRC

** Custom time calc
Build-in function is M-x init-emacs-time.
#+BEGIN_SRC emacs-lisp
  (defvar init-start (current-time))
  (add-hook 'after-init-hook
            (lambda ()
              (message (format "Init completed in %.6fs\n\n" (- (float-time (current-time)) (float-time init-start))))
              ))
#+END_SRC

* Theme
** A dark theme
#+BEGIN_SRC emacs-lisp
  ;;zerodark-theme, cyberpunk-theme
  (use-package zerodark-theme
    :ensure t
    :init
    (add-hook 'after-init-hook
              (lambda () (when (display-graphic-p)
                  (load-theme 'zerodark t)))))
#+END_SRC

** Some customization
#+BEGIN_SRC emacs-lisp
  (let ((class '((class color) (min-colors 89)))
        (default (if (true-color-p) "#abb2bf" "#afafaf"))
        (light (if (true-color-p) "#ccd4e3" "#d7d7d7"))
        (background (if (true-color-p) "#282c34" "#333333"))
        (background-dark (if (true-color-p) "#24282f" "#222222"))
        (background-darker (if (true-color-p) "#22252c" "#222222"))
        (mode-line-inactive (if "#1c2129" "#222222"))
        (mode-line-active (if (true-color-p) "#6f337e" "#875f87"))
        (background-lighter (if (true-color-p) "#3a3f4b" "#5f5f5f"))
        (background-red (if (true-color-p) "#4c3840" "#5f5f5f"))
        (bright-background-red (if (true-color-p) "#744a5b" "#744a5b"))
        (background-purple (if (true-color-p) "#48384c" "#5f5f5f"))
        (background-blue (if (true-color-p) "#38394c" "#444444"))
        (bright-background-blue (if (true-color-p) "#4e5079" "#4e5079"))
        (background-green (if (true-color-p) "#3d4a41" "#5f5f5f"))
        (bright-background-green (if (true-color-p) "#3f6d54" "#3f6d54"))
        (background-orange (if (true-color-p) "#4a473d" "#5f5f5f"))
        (hl-line (if (true-color-p) "#2c323b" "#333333"))
        (grey (if (true-color-p) "#cccccc" "#cccccc"))
        (grey-dark (if (true-color-p) "#666666" "#666666"))
        (highlight (if (true-color-p) "#3e4451" "#5f5f5f"))
        (comment (if (true-color-p) "#687080" "#707070"))
        (orange (if (true-color-p) "#da8548" "#d7875f"))
        (orange-light (if (true-color-p) "#ddbd78" "#d7af87"))
        (red (if (true-color-p) "#ff6c6b" "#ff5f5f"))
        (purple (if (true-color-p) "#c678dd" "#d787d7"))
        (purple-dark (if (true-color-p) "#64446d" "#5f5f5f"))
        (blue (if (true-color-p) "#61afef" "#5fafff"))
        (blue-dark (if (true-color-p) "#1f5582" "#005f87"))
        (green (if (true-color-p) "#98be65" "#87af5f"))
        (green-light (if (true-color-p) "#9eac8c" "#afaf87"))
        (peach "PeachPuff3")
        (diff-added-background (if (true-color-p) "#284437" "#284437"))
        (diff-added-refined-background (if (true-color-p) "#1e8967" "#1e8967"))
        (diff-removed-background (if (true-color-p) "#583333" "#580000"))
        (diff-removed-refined-background (if (true-color-p) "#b33c49" "#b33c49"))
        (diff-current-background (if (true-color-p) "#29457b" "#29457b"))
        (diff-current-refined-background (if (true-color-p) "#4174ae" "#4174ae")))

    (custom-theme-set-faces
     'zerodark

     `(fancy-battery-charging ((,class (:background ,background-blue :height 1.0 :bold t))))
     `(fancy-battery-discharging ((,class (:background ,background-blue :height 1.0))))
     `(fancy-battery-critical ((,class (:background ,background-blue :height 1.0))))
     
     ;; mode line stuff
     `(mode-line ((,class (:background ,background-blue :height 1.0 :foreground ,blue
                                       :distant-foreground ,background-blue
                                       :box ,(when zerodark-use-paddings-in-mode-line
                                               (list :line-width 6 :color background-blue))))))
     
     `(mode-line-inactive ((,class (:background ,background-blue :height 1.0 :foreground ,default
                                                :distant-foreground ,background-blue
                                                :box ,(when zerodark-use-paddings-in-mode-line
                                                        (list :line-width 6 :color background-blue))))))

     `(header-line ((,class (:inherit mode-line-inactive))))

     `(powerline-active0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-active1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-active2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-inactive0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             :distant-foreground ,background-blue))))
     `(powerline-inactive1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             distant-foreground ,background-blue))))
     `(powerline-inactive2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             :distant-foreground ,background-blue))))

     `(dashboard-heading-face ((,class (:background ,background :foreground ,blue
                                                    :bold t :height 1.2))))
     `(dashboard-banner-logo-title-face ((,class (:background ,background :foreground ,blue
                                                              :bold t :height 1.2))))
     `(widget-button ((,class (:background ,background :foreground ,default :bold nil
                                           :underline t :height 0.9))))
     
     ;; erc stuff
     `(erc-nick-default-face ((,class :foreground ,blue :background ,background :weight bold)))

     ;; org stuff
     `(outline-1 ((,class (:foreground ,blue :weight bold :height 1.8 :bold nil))))
     `(outline-2 ((,class (:foreground ,purple :weight bold :height 1.7 :bold nil))))
     `(outline-3 ((,class (:foreground ,peach :weight bold :height 1.6 :bold nil))))
     `(outline-4 ((,class (:foreground ,green-light :weight bold :height 1.5 :bold nil))))
     `(outline-5 ((,class (:foreground ,blue :weight bold :height 1.4 :bold nil))))
     `(outline-6 ((,class (:foreground ,purple :weight bold :height 1.3 :bold nil))))
     `(outline-7 ((,class (:foreground ,peach :weight bold :height 1.2 :bold nil))))
     `(outline-8 ((,class (:foreground ,green-light :weight bold :height 1.1 :bold nil))))
     
     `(org-block-begin-line ((,class (:background ,background-blue :foreground ,blue
                                                  :bold t :height 1.0))))
     `(org-block-end-line ((,class (:background ,background-blue :foreground ,blue
                                                :bold t :height 1.0))))))
#+END_SRC

** Custome faces
#+BEGIN_SRC emacs-lisp
  (setq fixme-modes '(c++-mode c-mode emacs-lisp-mode))
  (make-face 'font-lock-fixme-face)
  (make-face 'font-lock-study-face)
  (make-face 'font-lock-important-face)
  (make-face 'font-lock-improve-face)
  (make-face 'font-lock-note-face)
  (mapc (lambda (mode)
       (font-lock-add-keywords
        mode
        '(("\\<\\(TODO\\)" 1 'font-lock-fixme-face t)
          ("\\<\\(STUDY\\)" 1 'font-lock-study-face t)
          ("\\<\\(IMPROVE\\)" 1 'font-lock-improve-face t)
          ("\\<\\(IMPORTANT\\)" 1 'font-lock-important-face t)
             ("\\<\\(NOTE\\)" 1 'font-lock-note-face t))))
      fixme-modes)
  (modify-face 'font-lock-fixme-face "Red" nil nil t nil t nil nil)
  (modify-face 'font-lock-study-face "Green" nil nil t nil t nil nil)
  (modify-face 'font-lock-improve-face "Red" nil nil t nil t nil nil)
  (modify-face 'font-lock-important-face "Green" nil nil t nil t nil nil)
  (modify-face 'font-lock-note-face "Dark Green" nil nil t nil t nil nil)
#+END_SRC

* Interface
** Title
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "-- master -- %f -- %b")
#+END_SRC

** Remove default startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Disable menus and scrollbars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode 1)
  (scroll-bar-mode -1)
#+END_SRC

** Hide fringe
No fringe, see http://emacsredux.com/blog/2015/01/18/customizing-the-fringes/
#+BEGIN_SRC emacs-lisp
;; linux maybe need gdb, and use mouse to set breakpoint on fringe, so only hide fringe on windows.    
(when (eq system-type 'windows-nt)
  (set-window-fringes nil 0 0) ;; border side
  (fringe-mode '(0 . 0)) ;; middle of split frame
  )
#+END_SRC

** Disable bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Fonts
Fixed slower when file content has chinese.
https://github.com/tumashu/cnfonts
#+BEGIN_SRC emacs-lisp
;; Auto generated by cnfonts
(when (and (display-graphic-p) (eq system-type 'windows-nt))
  (set-face-attribute
   'default nil
   :font (font-spec :name "-outline-Consolas-bold-italic-normal-mono-*-*-*-*-c-*-iso10646-1"
                    :weight 'normal
                    :slant 'normal
                    :size 12.0))

  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font
     (frame-parameter nil 'font)
     charset
     (font-spec :name "-outline-KaiTi-normal-normal-normal-mono-*-*-*-*-c-*-iso10646-1"
                :weight 'normal
                :slant 'normal
                :size 12.0))))
#+END_SRC

** Encoding
*** utf-8
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)     ;; 设置emacs 使用 utf-8
  (set-language-environment 'Chinese-GB) ;; 设置为中文简体语言环境
  (set-keyboard-coding-system 'utf-8)    ;; 设置键盘输入时的字符编码
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  ;; 文件默认保存为 utf-8
  (set-buffer-file-coding-system 'utf-8)
  (set-default buffer-file-coding-system 'utf8)
  (set-default-coding-systems 'utf-8)
  ;; 解决粘贴中文出现乱码的问题
  (set-clipboard-coding-system 'utf-8)
  ;; 防止终端中文乱码
  (set-terminal-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (setq default-process-coding-system '(utf-8 . utf-8))
  ;; 解决文件目录的中文名乱码
  (setq-default pathname-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
#+END_SRC

*** Windows shell
#+BEGIN_SRC emacs-lisp
  (when (not (featurep 'x))
    (defun eye/change-shell-mode-coding ()
      (progn
        (set-terminal-coding-system 'gbk)
        (set-keyboard-coding-system 'gbk)
        (set-selection-coding-system 'gbk)
        (set-buffer-file-coding-system 'gbk)
        (set-file-name-coding-system 'gbk)
        (modify-coding-system-alist 'process "*" 'gbk)
        (set-buffer-process-coding-system 'gbk 'gbk)
        (set-file-name-coding-system 'gbk)))
    (add-hook 'shell-mode-hook 'eye/change-shell-mode-coding)
    (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on))
#+END_SRC

** Highlight current line
#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

** Backup directory
File name is !drive_f!dirname!dirname!filename~
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (setq backup-directory-alist (quote (("." . "d:/cache/backups"))))
  (setq backup-directory-alist (quote (("." . "~/cache/backups")))))
#+END_SRC

** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; (fset 'yes-or-no-p 'y-or-n-p) is same
#+END_SRC

** Async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init
    (dired-async-mode 1))
#+END_SRC

** w32-browser
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (use-package w32-browser
      :ensure t
      :config
      (define-key dired-mode-map [f11] 'dired-w32-browser)))
#+END_SRC

** Maximize
#+BEGIN_SRC emacs-lisp
  (defun maximize-frame ()
    "Maximizes the active frame in Windows"
    (interactive)
    ;; Send a `WM_SYSCOMMAND' message to the active frame with the
    ;; `SC_MAXIMIZE' parameter.
    (when (eq system-type 'windows-nt)
      (w32-send-sys-command 61488)))

  (defun post-load-stuff ()
    (interactive)
    (maximize-frame)
    (set-cursor-color "#40FF40"))

  (add-hook 'window-setup-hook 'post-load-stuff t)
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+END_SRC

** scratch buffer text
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message nil)
#+END_SRC

** Cursor type
#+BEGIN_SRC emacs-lisp
  (setq default-cursor-type 'bar)
#+END_SRC

* Site lisp
#+BEGIN_SRC emacs-lisp
  (eval-when-compile (require 'cl))
  (if (fboundp 'normal-top-level-add-to-load-path)
      (let* ((my-lisp-dir "~/.emacs.d/site-lisp/")
             (default-directory my-lisp-dir))
        (progn
          (setq load-path
                (append
                 (loop for dir in (directory-files my-lisp-dir)
                       unless (string-match "^\\." dir)
                       collecting (expand-file-name dir))
                 load-path)))))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-enable-caching 1)
    (projectile-mode 1))
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/dash-logo.png")
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title "Hello Soeye!"))
#+END_SRC

* Modeline
** Spaceline!
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
  ;; 默认的 buffer-encoding-abbrev 会把 utf-8-dos 直接显示成 dos，这里重新定义，用于显示完整的编码
  (spaceline-define-segment buffer-encoding-abbrev
    "The full `buffer-file-coding-system'."
    (format "%s" buffer-file-coding-system))
  
  (setq spaceline-buffer-encoding-p t)
  (setq spaceline-buffer-encoding-abbrev-p t)
  (setq spaceline-line-column-p t)
  (setq spaceline-line-p nil)
  (setq powerline-default-separator (quote arrow))
  (spaceline-spacemacs-theme))
#+END_SRC

** No separator
#+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator nil)
#+END_SRC

** Cursor position
Show current line and column on modeline.
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%Y-%m-%d %H:%M")
  (display-time-mode 1)
#+END_SRC

* Shell
** Linux use bash
#+BEGIN_SRC emacs-lisp
  (when (featurep 'x)
    (defvar my-term-shell "/bin/bash")
    (defadvice ansi-term (before force-bash)
      (interactive (list my-term-shell)))
    (ad-activate 'ansi-term)
    (global-set-key (kbd "<s-return>") 'ansi-term))
#+END_SRC

** Windows shell
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (global-set-key (kbd "<S-return>") 'shell))
#+END_SRC

* Efficient edit
** Prerequisite
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC

** Scorlling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** switch-window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
  :bind
  ([remap other-window] . switch-window)
  ("M-<f3>" . switch-window))
#+END_SRC

** Delete window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f3>") 'delete-other-windows)
(global-set-key (kbd "C-<f3>") 'delete-window)
#+END_SRC
 
** Following window splits
After split a window, let the focus in the new split window.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** swiper to search
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind
  ("C-f"   . 'swiper)
  ("M-f" . 'swiper-all))
#+END_SRC

** Buffer
*** Always kill current buffer
#+BEGIN_SRC emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-<f2>") 'kill-current-buffer)
#+END_SRC
*** Kill buffers without asking
#+BEGIN_SRC emacs-lisp
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC
*** close-all-buffers
#+BEGIN_SRC emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC

*** Do not ask
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :bind
  ("C-x C-f" . 'helm-find-files)
  ("M-o" . 'helm-find-files)
  ("C-x C-b" . 'ibuffer)
  ("<f2>" . 'helm-buffers-list)
  ("M-<f2>" . 'ibuffer)
  ("M-x" . 'helm-M-x)
  ("C-S-f" . 'helm-do-grep-ag)
  ;;  ("<escape>" . helm-M-x)
  :init
  (helm-mode 1)
  :config
  (defun eye/helm-hide-minibuffer ()
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))
  (add-hook 'helm-minibuffer-set-up-hook 'eye/helm-hide-minibuffer)
  (setq helm-autoresize-max-height 0
        helm-autoresize-min-height 40
        helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        helm-semantic-fuzzy-match t
        helm-imenu-fuzzy-match t
        helm-split-window-in-side-p nil
        helm-move-to-line-cycle-in-source nil
        helm-ff-search-library-in-sexp t
        helm-scroll-amount 8 
        helm-echo-input-in-header-line t))

(require 'helm-config)    
(helm-autoresize-mode 1)
(define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
(define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)
#+END_SRC

** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-g" . avy-goto-char))
#+END_SRC

** Bookmark
#+BEGIN_SRC emacs-lisp
  (add-hook 'kill-emacs-hook
            '(lambda ()
                     (bookmark-save)))
#+END_SRC

*** Keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f9>") 'list-bookmarks)
  (global-set-key (kbd "M-<f9>") 'bookmark-set)
#+END_SRC

** Quick move
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<M-left>") 'backward-word)
(global-set-key (kbd "<M-right>") 'forward-word)
(global-set-key (kbd "<M-up>") 'backward-paragraph)
(global-set-key (kbd "<M-down>") 'forward-paragraph)
#+END_SRC

orgmode key map
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "<M-left>") 'backward-word)
  (define-key org-mode-map (kbd "<M-right>") 'forward-word)
  (define-key org-mode-map (kbd "<M-up>") 'backward-paragraph)
  (define-key org-mode-map (kbd "<M-down>") 'forward-paragraph)
#+END_SRC 

** Quick insert new line
#+BEGIN_SRC emacs-lisp
(defun eye/new-next-line ()
  "在当前行下方快速添加新的一行。"
  (interactive)
  (move-end-of-line 1)
  (newline)
  (indent-for-tab-command))

(defun eye/new-previous-line ()
  "在当前行上方快速添加新的一行。"
  (interactive)
  (previous-line)
  (move-end-of-line 1)
  (newline)
  (indent-for-tab-command))

(global-set-key (kbd "M-n") 'eye/new-next-line)
(global-set-key (kbd "M-p") 'eye/new-previous-line)
#+END_SRC

* Text manipulation
** cua-mode
#+BEGIN_SRC emacs-lisp
(cua-mode t)
(global-set-key (kbd "C-<down>") 'scroll-up-command)
(global-set-key (kbd "C-<up>") 'scroll-down-command)
#+END_SRC

** multiple-cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t)
#+END_SRC

** edit-at-Point
#+BEGIN_SRC emacs-lisp
  (use-package edit-at-point
    :ensure t
    :bind ("C-c a" . 'edit-at-point-line-copy))
#+END_SRC

** Improved kill-word
#+BEGIN_SRC emacs-lisp
  (defun eye/kill-inner-word ()
    "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
    (interactive)
    ;;(forward-char 1) 
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "<M-backspace>") 'eye/kill-inner-word)
#+END_SRC

** Improved copy-word
#+BEGIN_SRC emacs-lisp
  (defun eye/copy-whole-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (kill-word 1)
      (yank)))
  (global-set-key (kbd "C-c w c") 'eye/copy-whole-word)
#+END_SRC

** Copy a line
#+BEGIN_SRC emacs-lisp
  (defun eye/copy-whole-line ()
    "Copies a line without regard for cursor position."
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c l c") 'eye/copy-whole-line)
#+END_SRC

** Kill a line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l k") 'kill-whole-line)
#+END_SRC

** Copy a paragraph
#+BEGIN_SRC emacs-lisp
  (defun eye/copy-paragraph ()
    "Copy paragraphes at point"
    (interactive)
    (let ((beg (progn (backward-paragraph 1) (point)))
          (end (progn (forward-paragraph 1) (point))))
      (copy-region-as-kill beg end)))
#+END_SRC

** Improved capitalize-word
Default downcase-word must move cursor to the word beginning.
#+BEGIN_SRC emacs-lisp
  (defun eye/capitalize-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (capitalize-word 1)))
  (global-set-key (kbd "M-c") 'eye/capitalize-word)
#+END_SRC

** Improved upcase-word
Default upcase-word must move cursor to the word beginning.
#+BEGIN_SRC emacs-lisp
  (defun eye/upcase-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (upcase-word 1)))
  (global-set-key (kbd "M-u") 'eye/upcase-word)
#+END_SRC

** Improved downcase-word
Default downcase-word must move cursor to the word beginning.
#+BEGIN_SRC emacs-lisp
  (defun eye/downcase-word ()
    (interactive)
    (save-excursion
      (forward-char 1)
      (backward-word)
      (downcase-word 1)))
  (global-set-key (kbd "M-l") 'eye/downcase-word)
#+END_SRC

** Delete selection when yank
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

** Quick copy other word
#+BEGIN_SRC emacs-lisp
(use-package eno
  :ensure t
  :chords (("ew" . eno-word-copy)))
#+END_SRC

* Grep
#+BEGIN_SRC emacs-lisp
  (defun eye/grep ()
    (interactive)
    (let* ((cur-word (thing-at-point 'word))
           (cmd (concat "grep --color -irHn " cur-word " *.h")))
      (setq cmd (read-from-minibuffer "command:" cmd))
      (grep-apply-setting 'grep-command cmd)
      (grep cmd)))
#+END_SRC

** wgrep
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t)
#+END_SRC

* Minor conveniences
** Visiting the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

** Reloading the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC

** Electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              ))
  (electric-pair-mode t)
#+END_SRC

** Rainbow
Show color of #hex format string.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
      (add-hook 'emacs-lisp-mode-hook 'rainbow-mode))
#+END_SRC

** Show parens
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** Indent region or buffer
If selected a region, indent region, otherwise indent buffer.
#+BEGIN_SRC emacs-lisp
(defun eye/indent-region-or-buffer ()
  (interactive)
  (save-excursion
    (if (region-active-p)
        (progn
          (indent-region (region-beginning) (region-end))
          (message "Indent selected region."))
      (progn
        (indent-region (point-min) (point-max))
        (message "Indent buffer.")))
    )
  )

(global-set-key (kbd "C-M-\\") 'eye/indent-region-or-buffer)
(define-key org-src-mode-map (kbd "C-<tab>") 'eye/indent-region-or-buffer)
(define-key prog-mode-map (kbd "C-<tab>") 'eye/indent-region-or-buffer)
#+END_SRC

** Hungry deletion
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
      (global-hungry-delete-mode))
#+END_SRC

** popup-kill-ring
#+BEGIN_SRC emacs-lisp
(use-package popup-kill-ring
  :ensure t
  :bind
  ("M-y" . popup-kill-ring)
  ("C-S-v" . popup-kill-ring))
#+END_SRC

** Quick ediff files from dired
Mark 2 files in dired, and press "e" into ediff. if only marked one file, then ask second file in prompt.
#+BEGIN_SRC emacs-lisp
  (defun ora-ediff-files ()
    (interactive)
    (let ((files (dired-get-marked-files))
          (wnd (current-window-configuration)))
      (if (<= (length files) 2)
          (let ((file1 (car files))
                (file2 (if (cdr files)
                           (cadr files)
                         (read-file-name
                          "file: "
                          (dired-dwim-target-directory)))))
            (if (file-newer-than-file-p file1 file2)
                (ediff-files file2 file1)
              (ediff-files file1 file2))
            (add-hook 'ediff-after-quit-hook-internal
                      (lambda ()
                        (setq ediff-after-quit-hook-internal nil)
                        (set-window-configuration wnd))))
        (error "no more than 2 files should be marked"))))

  (define-key dired-mode-map "e" 'ora-ediff-files)
#+END_SRC

** indent-guid
#+BEGIN_SRC emacs-lisp
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode))
#+END_SRC

** comment-dwim
#+BEGIN_SRC emacs-lisp
  (defun xah-comment-dwim ()
    "Like `comment-dwim', but toggle comment if cursor is not at end of line.

  URL `http://ergoemacs.org/emacs/emacs_toggle_comment_by_line.html'
  Version 2016-10-25"
    (interactive)
    (if (region-active-p)
        (comment-dwim nil)
      (let (($lbp (line-beginning-position))
            ($lep (line-end-position)))
        (if (eq $lbp $lep)
            (progn
              (comment-dwim nil))
          (if (eq (point) $lep)
              (progn
                (comment-dwim nil))
            (progn
              (comment-or-uncomment-region $lbp $lep)
              (forward-line )))))))

  (global-set-key (kbd "M-;") 'xah-comment-dwim)
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-o") 'dired)
#+END_SRC
*** wdired
#+BEGIN_SRC emacs-lisp
(use-package wdired
  :ensure t)
#+END_SRC

*** Virtual directory
打开 .dired 后缀文件时，自动进入 dired-virtual-mode 模式。
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
(setq auto-mode-alist (cons '("[^/]\\.dired$" . dired-virtual-mode)
                            auto-mode-alist))

;; quick generate virtual.dired file and open it
(defun eye/virtual-dir ()
  "Create and open a virtual directory file.
use command: ls -lR > virtual.dired
"
  (interactive)
  ;; Check ls can use
  (unless (executable-find "ls")
    (error "Unkown command 'ls'"))
  (let (dir path cmd)
    ;; get directory path
    (setq dir (read-directory-name "Directory: "))
    (unless (equal "/" (s-right 1 dir)) ;; check last / charactor
      (setq dir (concat dir "/")))
    (setq path (concat dir "virtual.dired"))
    (setq cmd (concat "ls -lR " dir " > " path))
    (message cmd)
    (when (or (y-or-n-p "Create or update?") (not (file-exists-p path)))
      (setq cmd (read-string "Command:" cmd))
      (eshell-command cmd))
    (if (file-exists-p path)
        (find-file path)
      (message "Can not create virtual.dired file."))))
#+END_SRC

** Auto revert
如果开启了全局 global-auto-revert，则 dired-virtual-mode 模式下经常会弹出提示，所以只在编程模式下开启。
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
            '(lambda ()
               (auto-revert-mode 1)))
#+END_SRC

** Save buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'save-buffer)
(define-key org-src-mode-map (kbd "C-s") 'org-edit-src-save)
#+END_SRC

** Quick help
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f1>") 'describe-variable)
(global-set-key (kbd "C-<f1>") 'describe-function)
(global-set-key (kbd "M-<f1>") 'describe-key)
#+END_SRC

* Programming
** yasnippet
Set defer is for quickly startup.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    )
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC

** company mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0.5)
  (setq company-minimum-prefix-length 3)
  (setq company-show-numbers t)
  ;; make previous/next selection in the popup cycles
  (setq company-selection-wrap-around t)
  (setq company-backends nil)
  (add-to-list 'company-backends 'company-files)
  (add-to-list 'company-backends 'company-etags)
  ;; company-dabbrev config, it is for current buffer string auto complete
  (add-to-list 'company-backends 'company-dabbrev)
  (add-to-list 'company-backends 'company-dabbrev-code)
  (setq company-dabbrev-code-everywhere t)
  (setq company-dabbrev-minimum-length 3)
  (setq company-dabbrev-other-buffers 'all)
  (setq company-dabbrev-downcase nil)

  (use-package company-statistics
    :ensure t
    :init
    (let ((dir "~/cache"))
      (if (eq system-type 'windows-nt)
          (setq dir "d:/cache"))
      (if (not (file-exists-p dir))
          (make-directory dir))
      (setq company-statistics-file (concat dir "/company-statistics-cache.el")))
    (company-statistics-mode)))

(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC

** ctags
#+BEGIN_SRC emacs-lisp
(use-package counsel-etags
  :ensure t
  :config
  ;; Don't ask before rereading the TAGS files if they have changed
  (setq tags-revert-without-query t)
  ;; Don't warn when TAGS files are large
  (setq large-file-warning-threshold nil)
  ;; Setup auto update now
  (add-hook 'prog-mode-hook
            (lambda ()
              (add-hook 'after-save-hook
                        'counsel-etags-virtual-update-tags 'append 'local)))
  :bind
  ("M-." . 'counsel-etags-find-tag-at-point))

(with-eval-after-load 'counsel-etags
  ;; counsel-etags-ignore-directories does NOT support wildcast
  (add-to-list 'counsel-etags-ignore-directories ".git")
  (add-to-list 'counsel-etags-ignore-directories ".svn")
  ;; counsel-etags-ignore-filenames supports wildcast
  (add-to-list 'counsel-etags-ignore-filenames "TAGS")
  (add-to-list 'counsel-etags-ignore-filenames "*.json")
  (add-to-list 'counsel-etags-ignore-filenames "ui_*.h")
  (add-to-list 'counsel-etags-ignore-filenames "*.ui")
  (add-to-list 'counsel-etags-ignore-filenames "moc_*.cpp")
  (add-to-list 'counsel-etags-ignore-filenames "*.rc")
  (add-to-list 'counsel-etags-ignore-filenames "*.qrc")
  (add-to-list 'counsel-etags-ignore-filenames "*.user"))

;; You can change callback counsel-etags-update-tags-backend to update tags file using your own solution,
;;;(setq counsel-etags-update-tags-backend (lambda () (shell-command "find . -type f -iname \"*.[ch]\" | etags -")))
#+END_SRC

** navigate
#+BEGIN_SRC emacs-lisp
(use-package backward-forward
  :ensure t
  :config
  (advice-add 'counsel-etags-find-tag-at-point :before #'backward-forward-push-mark-wrapper)
  (backward-forward-mode t))
#+END_SRC

** cmd
#+BEGIN_SRC emacs-lisp
  (defun eye/shell-cmd (buffer env)
    "Run cmd with new buffer name and path environment."
    (let ((explicit-shell-file-name "C:\\Windows\\System32\\cmd.exe")
          (shell-path-bak (getenv "PATH")) ;; save path
          (shell-buffer-name buffer)
          (shell-path-cmd env))
      (setenv "PATH" (concat shell-path-cmd "C:\\Windows\\System32;"))
      (shell shell-buffer-name)
      ;; restore path
      (setenv "PATH" shell-path-bak)))
#+END_SRC

*** cmake
#+BEGIN_SRC emacs-lisp
  (defun eye/shell-cmake ()
    (interactive)
    (eye/shell-cmd "shell-cmake" (concat "C:\\green-soft\\git\\bin;"
                                         "C:\\green-soft\\cmake-3.11.0-rc4-win64-x64\\bin;"
                                         )))
#+END_SRC

** languages
*** c/c++
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
Requires libclang to be installed.
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)
#+END_SRC

**** irony
#+BEGIN_SRC emacs-lisp
(use-package company-irony
  :ensure t
  :config
  (defun eye/add-irony-company-backends ()
    "If company-irony not exists in company-backends list, then add it to list."
    (unless (memq 'company-irony company-backends)
      (add-to-list 'company-backends 'company-irony))
    (unless (memq 'company-c-headers company-backends)
      (add-to-list 'company-backends 'company-c-headers)))
  
  (add-hook 'c-mode-hook 'eye/add-irony-company-backends)
  (add-hook 'c++-mode-hook 'eye/add-irony-company-backends))


(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

***** irony on windows
The PATH is used for a shell in emacs.
The exec-path is used for emacs itself to find programs.
#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    ;; Windows performance tweaks
    (when (boundp 'w32-pipe-read-delay)
      (setq w32-pipe-read-delay 0))
    ;; Set the buffer size to 64K on Windows (from the original 4K)
    (when (boundp 'w32-pipe-buffer-size)
      (setq irony-server-w32-pipe-buffer-size (* 64 1024)))
    ;; irony-server path
    (setq irony--server-executable "d\:/home/.emacs.d/irony/bin/irony-server.exe")
    ;; clang path
    (setenv "PATH"
            (concat "C:\\msys32\\mingw64\\bin" ";"
                    (getenv "PATH")))
    (setq exec-path (append exec-path '("c:/msys32/mingw64/bin"))))
#+END_SRC

**** rtags
#+BEGIN_SRC emacs-lisp
  ;;(use-package rtags
  ;;  :ensure t)
  ;;
  ;;(defun eye/rtags-goto-symbol ()
  ;;  (interactive)
  ;;  (deactivate-mark)
  ;;  (ring-insert find-tag-marker-ring (point-marker))
  ;;  (or (and (require 'rtags nil t)
  ;;           (rtags-find-symbol-at-point))
  ;;      (error nil)))
  ;;
  ;;(define-key c++-mode-map (kbd "M-.") 'eye/rtags-goto-symbol)
  ;;(define-key c++-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

**** tab width
#+BEGIN_SRC emacs-lisp
  (defun set-tab-width-hook ()
    (setq indent-tabs-mode nil)
    (setq default-tab-width 4)
    (setq tab-width 4)
    (setq c-basic-offset 4) ;; tab 缩进量
    (setq c-default-style "linux") ;; 大括号缩进位置，https://en.wikipedia.org/wiki/Indentation_style
    (setq tab-stop-list ()))
  (add-hook 'c-mode-common-hook 'set-tab-width-hook)
  (add-hook 'c++-mode-common-hook 'set-tab-width-hook)
#+END_SRC

**** Quick open .h/.cpp file
#+BEGIN_SRC emacs-lisp
(defun eye/find-corresponding-file ()
    "Find the file that corresponds to this one."
    (interactive)
    (setq CorrespondingFileName nil)
    (setq BaseFileName (file-name-sans-extension buffer-file-name))
    (if (string-match "\\.c" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".h")))
    (if (string-match "\\.h" buffer-file-name)
       (if (file-exists-p (concat BaseFileName ".c")) (setq CorrespondingFileName (concat BaseFileName ".c"))
           (setq CorrespondingFileName (concat BaseFileName ".cpp"))))
    (if (string-match "\\.hin" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".cin")))
    (if (string-match "\\.cin" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".hin")))
    (if (string-match "\\.cpp" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".h")))
        (if (string-match "\\.c" buffer-file-name)
       (setq CorrespondingFileName (concat BaseFileName ".h")))
    (if CorrespondingFileName (find-file CorrespondingFileName)
      (error "Unable to find a corresponding file")))

(add-hook 'c++-mode-common-hook
          '(lambda ()
             (local-set-key (kbd "C-c f") 'eye/find-correspoinding-file)))

(add-hook 'c-mode-common-hook
          '(lambda ()
             (local-set-key (kbd "C-c f") 'eye/find-correspoinding-file)))
#+END_SRC

**** qt-pro-mode
#+BEGIN_SRC emacs-lisp
  (use-package qt-pro-mode
    :ensure t
    :mode ("\\.pro\\'" "\\.pri\\'")
    :config
    (add-hook 'qt-pro-mode 'yas-minor-mode))
#+END_SRC

**** qml
#+BEGIN_SRC emacs-lisp
(use-package qml-mode
  :ensure t
  :init
  (autoload 'qml-mode "qml-mode" "Editing Qt Declarative." t)
  (add-to-list 'auto-mode-alist '("\\.qml$" . qml-mode))
  :config
  (use-package company-qml
    :ensure t
    :init
    (defun eye/add-qml-company-backends ()
      "If company-qml not exists in company-backends list, then add it to list."
      (unless (memq 'company-qml company-backends)
        (add-to-list 'company-backends 'company-qml)))
    (add-hook 'qml-mode-hook 'eye/add-qml-company-backends)))
#+END_SRC

**** Change .h file to c++ mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

**** compile
奇怪问题：在 emacs 中使用 mingw32-make 编译时总是报错无法找到引用，链接出错。
但是在命令行下却又能成功编译。
所以不直接调用 mingw32-make，而是调用 build.bat 批处理文件来进行编译。
#+BEGIN_SRC emacs-lisp
  (defvar build-script nil)
  (if (eq system-type 'windows-nt)
      (setq build-script "build.bat")
    (setq build-script "build.sh")
    )

  (setq qt-dir "C:\\Qt\\Qt4.8.7\\bin")
  (setq qtcreator-dir "C:\\Qt\\qtcreator-4.6.0\\bin")
  (setq gcc-dir "C:\\Qt\\Qt4.8.7\\bin")
  (setq vs-env "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\vcvarsall.bat")

  (defun eye/set-gcc-env ()
    (let (path)
      (setq path (concat "@echo off\r\n"
                         "set path=%path%;" qt-dir ";" gcc-dir ";" qtcreator-dir ";" "\r\n"))
      path))

  (defun eye/set-vs-env ()
    (let (path)
      (setq path (concat "@echo off\r\n"
                         "call \"" vs-env "\"" "\r\n"))
      path))

  (defun eye/get-directory ()
    (let ((dir (read-directory-name "Project Directory: ")))
      (if (not (file-exists-p dir))
          (mkdir dir))
      dir))

  (defun eye/create-qt-gcc-build-script ()
    (interactive)
    (let (dir file script command)
      (setq dir (eye/get-directory))
      (setq file (concat dir build-script))
      (setq command (format "mingw32-make -w -f Makefile.Release -C %s" dir))
      (setq script (concat (eye/set-gcc-env) command))
      (f-write script 'gbk file)
      ))

  (defun eye/create-qt-vs-build-script ()
    (interactive)
    (let (dir file script command projectfile)
      (setq projectfile (read-file-name "Project file:"))
      (setq dir (file-name-directory projectfile))
      (setq file (concat dir build-script))
      (setq command (format "devenv \"%s\" /build" projectfile))
      (setq script (concat (eye/set-vs-env) command))
      (f-write script 'gbk file)
      ))

  (require 'compile)
  (setq compilation-directory-locked nil)

  ;; Compilation
  (setq compilation-context-lines 0)
  (setq compilation-error-regexp-alist
        (cons '("^\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(\t\n]+\\)(\\([0-9]+\\)) : \\(?:fatal error\\|warnin\\(g\\)\\) C[0-9]+:" 2 3 nil (4))
              compilation-error-regexp-alist))

  (defun find-project-directory-recursive (x)
    "Recursively search for a makefile."
    (interactive)
    (if (file-exists-p x) t
      (cd "../")
      (find-project-directory-recursive x)))

  (defun lock-compilation-directory ()
    "The compilation process should NOT hunt for a makefile"
    (interactive)
    (setq compilation-directory-locked t)
    (message "Compilation directory is locked."))

  (defun unlock-compilation-directory ()
    "The compilation process SHOULD hunt for a makefile"
    (interactive)
    (setq compilation-directory-locked nil)
    (message "Compilation directory is roaming."))


  (defun find-project-directory ()
    "Find the project directory."
    (interactive)
    (setq find-project-from-directory default-directory)
    ;;(switch-to-buffer-other-window "*compilation*")
    (if compilation-directory-locked (cd last-compilation-directory)
      (cd find-project-from-directory)
      (find-project-directory-recursive build-script)
      (setq last-compilation-directory default-directory)))


  ;; 在当前和上级目录中查找 Makefile 文件路径
  (require 'cl) ; If you don't have it already
  (defun* get-closest-pathname (&optional (file "Makefile"))
    "Determine the pathname of the first instance of FILE starting from the current directory towards root.
    This may not do the correct thing in presence of links. If it does not find FILE, then it shall return the name
    of FILE in the current directory, suitable for creation"
    (let ((root (expand-file-name "/"))) ; the win32 builds should translate this correctly
      (expand-file-name file
                        (loop
                         for d = default-directory then (expand-file-name ".." d)
                         if (file-exists-p (expand-file-name file d))
                         return d
                         if (equal d root)
                         return nil))))

  ;; For M-x compile
  (defun build-command ()
    (set (make-local-variable 'compile-command)
         (get-closest-pathname build-script)))

  (add-hook 'c++-mode-hook 'build-command)

  (defun eye/compile-cpp ()
    (interactive)
    (let (command (get-closest-pathname build-script))
      (compile command))
    )



  ;; Success or failure of compile
  (defun notify-compilation-result(buffer msg)
    "Notify that the compilation is finished."
    (if (string-match "^finished" msg)
        (progn
          ;;    (delete-windows-on buffer) ; Auto close compilation buffer
          (tooltip-show "\n Compilation Successful :-) \n "))
      (tooltip-show "\n Compilation Failed :-( \n ")))

  (add-to-list 'compilation-finish-functions 'notify-compilation-result)


  (defun make-without-asking ()
    "Make the current build."
    (interactive)
    (if (find-project-directory) (compile (concat "build.bat " (buffer-name (current-buffer)) )))
    ;;(switch-to-buffer-other-window "*compilation*")
    (delete-other-window)
    (switch-to-buffer "*compilation*"))

  (defun real-make-without-asking ()
    "Make the current build."
    (interactive)
    (if (find-project-directory) (compile "make" ))
    (switch-to-buffer-other-window "*compilation*")
    (other-window 1))

  (define-key c++-mode-map (kbd "<f5>") 'make-without-asking)
#+END_SRC

smart compile
#+BEGIN_SRC emacs-lisp
  (use-package smart-compile
    :ensure t
    :config
    (setq smart-compile-option-string "-w -s -j4"))
#+END_SRC

*** python
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'company
      (add-hook 'python-mode-hook 'company-mode))
#+END_SRC

**** cmd shell
#+BEGIN_SRC emacs-lisp
  (defun eye/shell-python3 ()
    (interactive)
    (eye/shell-cmd "shell-python3" "C:\\Python\\Python36;C:\\Python\\Python36\\Scripts;")
    )
#+END_SRC

*** emacs-lisp
**** eldoc
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
#+END_SRC

**** company
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'company-mode)
(defun eye/add-elisp-company-backends ()
  "If company-elisp not exists in company-backends list, then add it to list."
  (unless (memq 'company-elisp company-backends)
    (add-to-list 'company-backends 'company-elisp)))
(add-hook 'emacs-lisp-mode-hook 'eye/add-elisp-company-backends)
#+END_SRC

**** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    ;;(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    ;;(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    ;;(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    ;;(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    ;;(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    ;;(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    ;;(add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    )
#+END_SRC

*** lua
**** lua-mode
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t
    :config
    (setq lua-indent-level 4))
#+END_SRC

**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'lua-mode-hook 'yas-minor-mode)
#+END_SRC

**** cmd
#+BEGIN_SRC emacs-lisp
  (defun eye/lua-shell ()
    (interactive)
    (setq default-directory "d:/projects/lua")
    (eye/shell-cmd "lua-shell" "c:\\Lua5.1;"))
#+END_SRC

*** sql
**** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'sql-mode-hook 'yas-minor-mode)
#+END_SRC

*** autoit
#+BEGIN_SRC emacs-lisp
(require 'autoit-mode)
(add-to-list 'auto-mode-alist '("\\.au3$" . autoit-mode))
#+END_SRC

* Git integration
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50))
#+END_SRC

** fullframe
#+BEGIN_SRC emacs-lisp
  (use-package fullframe
    :ensure t
    :config
    (fullframe magit-status magit-mode-quit-window nil))
#+END_SRC

* Org
** Common settings
#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ")
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-fontify-natively t) ;; code block highlight
(setq org-src-window-setup 'current-window)
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook 'yas-minor-mode)

;; indent content
(setq org-edit-src-content-indentation 0)
(setq org-startup-indented t)
(setq org-startup-folded (quote overview))
;; hides blank lines between headings
(setq org-cycle-separator-lines 0)
;; always require new line in header below
(setq require-final-newline t)
;; calendar start at monday
(setq calendar-week-start-day 1)

(setq org-support-shift-select 1)
#+END_SRC

** Exported to HTML
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            '(lambda ()
               (visual-line-mode 1)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
#+END_SRC

** Easy-to-add src template
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  ;; emacs-lisp
  (add-to-list 'org-structure-template-alist
                 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  ;; c++
  (add-to-list 'org-structure-template-alist
               '("cpp" "#+BEGIN_SRC C++\n?\n#+END_SRC"))

  ;; lua
  (add-to-list 'org-structure-template-alist
               '("lu" "#+BEGIN_SRC lua\n?\n#+END_SRC"))

  ;; python
  (add-to-list 'org-structure-template-alist
                 '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))


  ;;; Custom util function
  ;; http://wenshanren.org/?p=327
  (defun eye/org-insert-src-block (src-code-type)
    "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
    (interactive
     (let ((src-code-types
            '("C++" "emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "css"
              "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
              "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
              "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
              "scheme" "sqlite")))
       (list (ido-completing-read "Source code type: " src-code-types))))
    (progn
      ;(newline-and-indent) ; no auto indent space
      (insert (format "#+BEGIN_SRC %s\n" src-code-type)) ; use lower string
      ;(newline-and-indent)
      (insert "#+END_SRC\n")
      (previous-line 2)
      (org-edit-src-code)))

#+END_SRC

** org capture
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/notebook/notes/gtd")
(setq org-default-notes-file (concat org-directory "/inbox.org"))

(setq org-agenda-files (list (concat org-directory "/inbox.org")
                             (concat org-directory "/todo.org")
			     (concat org-directory "/note.org")
                             ))

(setq org-capture-templates
      '(
	("n" "New" entry (file "~/notebook/notes/gtd/inbox.org")
         "* %?\n%i\n" :prepend t :empty-lines 1)
	("t" "Todo" entry (file+headline "~/notebook/notes/gtd/todo.org" "Todo")
         "* %?\n%i\n")
        ))

(setq org-refile-targets
      '(
	("~/notebook/notes/gtd/note.org" :level . 1)
        ("~/notebook/notes/gtd/finished.org" :level . 1)
        ("~/notebook/notes/gtd/trash.org" :level . 1)
	))

(setq org-archive-location "~/notebook/notes/gtd/finished.org::")


(defun eye/inbox ()
  (interactive)
  (find-file org-default-notes-file)
  )

(defun eye/todo ()
  (interactive)
  (find-file (concat org-directory "/todo.org"))
  )

(global-set-key (kbd "<f10>") 'org-capture)
#+END_SRC

** org crypt
#+BEGIN_SRC emacs-lisp
  ;; Advise set auto-save-default to nil
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote("crypt")))
  (setq org-crypt-key nil)
  ;(setq org-crypt-tag-matcher "secret") ;; Custom tag for crypt
#+END_SRC

** org-brain
#+BEGIN_SRC emacs-lisp
(when (> emacs-major-version 25)
  (use-package org-brain
    :ensure t
    :init
    (setq org-brain-path "~/notebook/notes/brain")
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 64)
    ;; If org-brain is slow, set this!, if this value is t, the title can not contain slashes(/)
    (setq org-brain-file-entries-use-title t)
    ))
#+END_SRC

** org agenda
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t!)" "NEXT(n)" "WAITTING(w)" "SOMEDAY(s)" "|" "DONE(d@/!)" "ABORT(a@/!)")
	))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
	      ("WAITING" :foreground "orange" :weight bold)
	      ("SOMEDAY" :foreground "magenta" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("ABORT" :foreground "forest green" :weight bold))))

#+END_SRC

** org babel execute
#+BEGIN_SRC emacs-lisp
;;(org-babel-do-load-languages
;; 'org-babel-load-languages
;; '((lua . t))) ;; can not open ob-lua
#+END_SRC

* Blog
** deft
#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :bind ("<f8>" . deft)
  :config
  (setq deft-directory "d:/projects/python/nikola/eye.github.io/posts")
  (setq deft-extensions '("org"))
  (setq deft-recursive t)
  (setq deft-text-mode 'org-mode)
  (setq deft-incremental-search nil)
  (setq deft-use-filename-as-title t)
  (setq deft-strip-summary-regexp (concat "\\("
                                          "^#\\+OPTIONS:.*"
                                          "\\|^#\\+BEGIN.*"
                                          "\\|^\.+ title: "
                                          "\\|^\.+ slug.*"
                                          "\\|^\.+ date.*"
                                          "\\|^\.+ tags.*"
                                          "\\|^\.+ category.*"
                                          "\\|^\.+ link.*"
                                          "\\|^\.+ desc.*"
                                          "\\|^\.+ type.*"
                                          "\\|^#\\+END.*"
                                          "\\)"))
  )

(defun eye/deft-dir ()
  (interactive)
  (require 'deft)
  (setq deft-directory (read-directory-name "Deft dir: " deft-directory))
  (deft))

(defun eye/deft-posts ()
  (interactive)
  (require 'deft)
  (setq deft-directory "d:/projects/python/nikola/eye.github.io/posts")
  (deft))

(defun eye/deft-notes ()
  (interactive)
  (require 'deft)
  (setq deft-directory "~/notebook/notes")
  (deft))
#+END_SRC 

** prodgy service manager
#+BEGIN_SRC emacs-lisp
  (use-package prodigy
    :ensure t)
#+END_SRC

** nikola
#+BEGIN_SRC emacs-lisp
  (use-package nikola
    :ensure t
    :config
    (setq nikola-output-root-directory "d:/projects/python/nikola/eye.github.io/")
    (setq nikola-verbose t)
    (setq nikola-webserver-auto t)
    (setq nikola-webserver-host "127.0.0.1")
    (setq nikola-webserver-port "8080")
    (setq nikola-webserver-open-browser-p t)
    (setq nikola-new-post-extension "org")
    ;;(setq nikola-deploy-input t)
    ;;(setq nikola-deploy-input-default "New article")
    ;;(setq nikola-build-before-hook-script (concat nikola-output-root-directory "scripts/pre-build.sh"))
    ;;(setq nikola-build-after-hook-script (concat nikola-output-root-directory "scripts/post-build.sh"))
    ;;(setq nikola-deploy-after-hook-script "nikola iarchiver")
    )
#+END_SRC

*** cmd shell
#+BEGIN_SRC emacs-lisp
  (defun eye/shell-nikola ()
    (interactive)
    (eye/shell-cmd "shell-nikola"
                   (concat "c:\\green-soft\\emacs-25.3_1-x86_64\\bin;"
                           "C:\\Python\\Python36;C:\\Python\\Python36\\Scripts;"
                           )))
#+END_SRC

*** prodigy service manager
Maybe can not find nikola command if have not global environment.
#+BEGIN_SRC emacs-lisp
  (prodigy-define-service
    :name "Blog service"
    :command "nikola"
    :args '("serve" "--browser")
    :cwd "d:/projects/python/nikola/eye.github.io"
    :tags '(blog)
    :stop-signal 'sigkill
    :kill-process-buffer-on-stop t)
#+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (setq tramp-default-method "plink")
    (setq tramp-default-method "ssh"))
#+END_SRC

* Search engine
** prelude search
Copy from prelude config
https://github.com/bbatsov/prelude/blob/master/core/prelude-core.el
#+BEGIN_SRC emacs-lisp
  (defun prelude-search (query-url prompt)
    "Open the search url constructed with the QUERY-URL.
  PROMPT sets the `read-string prompt."
    (browse-url
     (concat query-url
             (url-hexify-string
              (if mark-active
                  (buffer-substring (region-beginning) (region-end))
                (read-string prompt))))))

  (defmacro prelude-install-search-engine (search-engine-name search-engine-url search-engine-prompt)
    "Given some information regarding a search engine, install the interactive command to search through them"
    `(defun ,(intern (format "prelude-%s" search-engine-name)) ()
         ,(format "Search %s with a query or region if any." search-engine-name)
         (interactive)
         (prelude-search ,search-engine-url ,search-engine-prompt)))

  (prelude-install-search-engine "google"     "http://www.google.com/search?q="              "Google: ")
  (prelude-install-search-engine "youtube"    "http://www.youtube.com/results?search_query=" "Search YouTube: ")
  (prelude-install-search-engine "github"     "https://github.com/search?q="                 "Search GitHub: ")
  (prelude-install-search-engine "duckduckgo" "https://duckduckgo.com/?t=lm&q="              "Search DuckDuckGo: ")
  (prelude-install-search-engine "bing"       "https://www.bing.com/search?q="               "Bing: ")
#+END_SRC

* Media
** mpg123
#+BEGIN_SRC emacs-lisp
  (autoload 'mpg123 "mpg123" "A Front-end to mpg123/ogg123" t)
#+END_SRC

* Dictionary
#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
  :ensure t
  :bind
  ("<f8>" . 'youdao-dictionary-search)
  ("M-<f8>" . 'youdao-dictionary-search-from-input))
#+END_SRC

* hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :config
  (defhydra hydra-function (:color red :exit t)
    ("c" org-capture "capture")
    ("d" youdao-dictionary-search "dict")
    ("e" youdao-dictionary-search-from-input "dict input")
    ("m" mpg123 "music")
    ("g" magit-status "magit")
    ("=" text-scale-increase "scale add")
    ("-" text-scale-decrease "scale sub")
    ("q" nil "cancel"))

  (global-set-key (kbd "<f12>") 'hydra-function/body)
  )
#+END_SRC

* Diminishing modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'linum-relative-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'visual-line-mode)
    (diminish 'subword-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'rainbow-mode)
    (diminish 'indent-guide-mode)
    (diminish 'org-indent-mode)
    (diminish 'helm-mode))
#+END_SRC

* Custom set variables
Disable auto added stuff, see https://www.reddit.com/r/emacs/comments/4q4ixw/how_to_forbid_emacs_to_touch_configuration_files/
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom-set-variables.el"))
  (load custom-file 'noerror)
#+END_SRC

* Custom key bindings
| key    | describle             |
|--------+-----------------------|
| C-f    | swiper                |
| M-f    | grep                  |
| C-s    | save                  |
| M-o    | open file             |
| C-o    | dired                 |
| C-q    | expand region         |
| M-y    | popup kill ring       |
| M-g    | go to char            |
| <f2>   | switch to buffer      |
| M-<f2> | ibuffer               |
| C-<f2> | kill current buffer   |
| <f3>   | delete other window   |
| C-<f3> | delete current window |
| M-<f3> | switch window         |
| <f12>  | hydra function        |
